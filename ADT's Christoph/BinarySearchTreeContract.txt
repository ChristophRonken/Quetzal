
ADT Binary Search Tree:

createSearchTree()
// Creates BST with an empty root
// precondition: self.root == None
// postcondition: creates an empty node as a root for BST

destroySearchTree()
// Destroys BST
// precondition:
// postcondition: self.root == None

isEmpty(): boolean
// Checks if BST is empty
// precondition:
// postcondition:   return True: BST is empty
                    return False: BST is not empty

insert(root: Node, searchkey: integer, data: BSTItemType): boolean
// Inserts an element in the right place
// precondition:    searchkey is place in BST
                    searchkey is no duplicate
// postcondition:   return True: element is added
                    return False: element isn't added

findNode(root: Node, searchkey: integer): Node
// Returns a node with given searchkey
// precondition:    searchkey is place in BST
// postcondition:   return Node: Node with searchkey found and returned
                    return False: Node with searchkey not found

deleteNode(root: Node, searchkey: integer): boolean
// Returns a node with given searchkey
// precondition:    searchkey is place in BST
// postcondition:   return True: Node with searchkey deleted
                    return False: Node with searchkey not deleted

isInTree(root: Node, searchkey: integer): boolean
// Checks if there is a Node in BST with given searchkey
// precondition:    searchkey is place in BST
// postcondition:   return True: Node with searchkey found
                    return False: Node with searchkey not found

parent(root: Node)
// Returns parent of a Node
// precondition:
// postcondition:   return Node: parent returned
                    return False: there is no parent

successor(rchild: Node)
// Returns the inorder successor of a Node
// precondition:
// postcondition:   return Node: inorder successor returned
                    return False: there is no inorder successor

preOrder(root: Node)
// Prints the elements in preorder traversal
// precondition:
// postcondition:

inOrder(root: Node)
// Prints the elements in inorder traversal
// precondition:
// postcondition:

postOrder(root: Node)
// Prints the elements in postorder traversal
// precondition:
// postcondition: